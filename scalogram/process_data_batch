from data_process_wav import DataSplitter
from scalogram import Scalogram
from floodfill import Floodfill
import sys
import os
from notify_run import Notify
import gzip
import shutil
import glob

if len(sys.argv) < 4:
    command = sys.argv[0]
    print('Usage:', command, '<wav-directory> <wav-save-directory> <png-save-directory>', file=sys.stderr)
    exit(-1)

# prelims 
wav_dir = sys.argv[1]
wav_save_dir = sys.argv[2]
png_save_dir = sys.argv[3]
flood_dir = os.path.join(png_save_dir, 'flood')
# create flooded png directory if doesn't exist
if not os.path.isdir(flood_dir):
    os.mkdir(flood_dir)

notify = Notify()

print('wav_dir = %s' % wav_dir)
print('wav_save_dir = %s' % wav_save_dir)
print('png_save_dir = %s' % png_save_dir)
print('flood_dir = %s' % flood_dir)

# print('###### Files found in %s ######' % wav_dir)

# print('##### batch size: %d' % batch_size)
# notify.send('batch size: %d' % batch_size)


print('###### Saving split files to %s ######' % wav_save_dir)
data_splitter = DataSplitter(130, wav_dir, wav_save_dir)


###########################################################
### run split wav --> scal --> png --> flood in batches ###
###########################################################

# notify.send('running batches of size %d' % batch_size)

listwavs = os.listdir(wav_save_dir)
totalwavs = len(glob.glob1(wav_save_dir, '*.wav'))
i=1

try:
    for splitwav in listwavs:
        if splitwav.endswith('.wav'):

            ### report current batch progress
            # print('batch progress: (%d/%d)' % (batch_counter, batch_size)
            # notify.send('batch progress: (%d/%d)' % (batch_counter, batch_size))
    
            ### report progress
            print('(%d/%d)' % (i, totalwavs))
            notify.send('(%d/%d)' % (i, totalwavs))

            wavname = os.path.join(wav_save_dir, splitwav)              # .wav file with full path
            fname = splitwav[:splitwav.rfind('.')]                      # remove .wav extension
            scalname = os.path.join(png_save_dir, '%s.scal' % fname)    # .scal file with full path
            scalgzname = scalname + '.gz'                               # .scal.gz file
            mp3name = os.path.join(wav_save_dir, fname + '.mp3')        # .mp3 name

            ####################
            ### wav --> scal ###
            ####################
            
            print('\n#####starting wav -> scal transformation')

            ### check for already existing .scal file
            if os.path.exists(scalname) or os.path.exists(scalgzname):
                print("SCAL file or gz %s already exists" % scalname)
            else:
                ################################################################
                ### create the scal file
                print("Creating SCAL file from \"" + wavname + "\".")
                scal = Scalogram(wavname)
                scal.write_to_file(filename=scalname)
                print("   ", scal)

                ################################################################
                ## compress the scal file automatically to conserve disk space
                #with open(scalname, 'rb') as f_in:
                #    with gzip.open(scalgzname, 'wb') as f_out:
                #        shutil.copyfileobj(f_in, f_out)
                ## delete original scal file
                #os.remove(scalname)

                ################################################################
                ### compress .wav file once converted to .scal file
                print('compressing wav file %s' % wavname)
                os.system('ffmpeg -i %s %s' % (wavname, mp3name))
                print('wav -> mp3 compression complete')

                
            
            ####################
            ### scal --> png ###
            ####################

            pngname = os.path.join(png_save_dir, '%s.png' % fname)  # .png file with full path

            print('\n##### starting scal -> png transformation')
            print(pngname)

            ### check for already existing .png file
            if os.path.exists(pngname):
                print("PNG file %s already exists" % pngname)
            else:
                ################################################################
                ### load the correct scal file (raw or gz)
                isScalGz = os.path.exists(scalgzname)
                if isScalGz:
                    ### decompress .scal.gz
                    with open(scalgzname, 'rb') as f_in:
                        with gzip.open(scalname, 'wb') as f_out:
                            shutil.copyfileobj(f_in, f_out)
                    ## delete original scal file
                    os.remove(scalgzname)
                
                sname = scalname

                ################################################################
                ### create the png file
                print("Info on SCAL file \"" +sname+ "\":")
                scal = Scalogram(sname)
                print('loaded scal')
                # print("   ", scal)
                #argmax = scal.argmax()
                #argmin = scal.argmin()
                #print("   max:", scal[argmax[0]][argmax[1]], "(t:", argmax[0], ", f:", argmax[1], ")")
                #print("   min:", scal[argmin[0]][argmin[1]], "(t:", argmin[0], ", f:", argmin[1], ")")
                #print("   mean:", scal.mean())
                scal.write_to_png(filename=pngname)
                print('wrote')

                notify.send('created pngfile')

            #################
            ### flood png ###
            #################

            floodpngname = os.path.join(flood_dir, '%s_flooded.png' % fname)    # flooded .png file with full path
            print('\n##### starting flooding png')
            print(floodpngname)

            ### check for already existing flooded .png file
            if os.path.exists(floodpngname):
                print("FLOODED PNG file %s already exists" % floodpngname)
            else:
                print('Info on PNG file \'' + pngname + '\':')
                png = Floodfill(pngname)
                print('flooded')
                png.write_to_png(filename=floodpngname);
                print('writing')

            notify.send('pngfile flooded')

            #######################################################
            ### delete .wav and .scal files that were just used ###
            #######################################################


            ################################################################
            ### remove scal file
            print(scalname)
            os.remove(scalname)
            print('.scal file deleted')

            #################################################################
            ### remove original spliced .wav file
            os.remove(wavname)
            print('spliced .wav files deleted')

            i+=1

except:
    print('################## ERROR DURING WAV -> SCAL -> PNG -> FLOOD CONVERSION ################')
    notify.send('ERROR: error occurred during wav -> scal -> png -> flood conversion') 


#############################################################
### Notify myself using qr code notif when process donezo ###
#############################################################
notify.send('ALL DONE')
